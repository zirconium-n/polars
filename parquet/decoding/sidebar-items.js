initSidebarItems({"fn":[["get_decoder","Gets a decoder for the column descriptor `descr` and encoding type `encoding`."]],"struct":[["DeltaBitPackDecoder","Delta binary packed decoder. Supports INT32 and INT64 types. See `DeltaBitPackEncoder` for more information."],["DeltaByteArrayDecoder","Delta byte array decoder. Prefix lengths are encoded using `DELTA_BINARY_PACKED` encoding, Suffixes are stored using `DELTA_LENGTH_BYTE_ARRAY` encoding. See `DeltaByteArrayEncoder` for more information."],["DeltaLengthByteArrayDecoder","Delta length byte array decoder. Only applied to byte arrays to separate the length values and the data, the lengths are encoded using DELTA_BINARY_PACKED encoding. See `DeltaLengthByteArrayEncoder` for more information."],["DictDecoder","Dictionary decoder. The dictionary encoding builds a dictionary of values encountered in a given column. The dictionary is be stored in a dictionary page per column chunk. See `DictEncoder` for more information."],["PlainDecoder","Plain decoding that supports all types. Values are encoded back to back. For native types, data is encoded as little endian. Floating point types are encoded in IEEE. See `PlainEncoder` for more information."],["PlainDecoderDetails",""],["RleValueDecoder","RLE/Bit-Packing hybrid decoding for values. Currently is used only for data pages v2 and supports boolean types. See `RleValueEncoder` for more information."]],"trait":[["Decoder","A Parquet decoder for the data type `T`."]]});