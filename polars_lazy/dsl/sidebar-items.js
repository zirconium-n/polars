initSidebarItems({"enum":[["AggExpr",""],["ApplyOptions",""],["Expr","Queries consists of multiple expressions."],["Operator",""]],"fn":[["all_exprs","Evaluate all the expressions with a bitwise and"],["any_exprs","Evaluate all the expressions with a bitwise or"],["avg","Find the mean of all the values in this Expression."],["binary_expr",""],["cast","Cast expression."],["col","Create a Column Expression based on a column name."],["count","Count the number of values in this Expression."],["fold_exprs","Accumulate over multiple columns horizontally / row wise."],["is_not_null","IsNotNull expression."],["is_null","IsNull expression"],["lit","Create a Literal Expression from `L`"],["map_binary","Apply a closure on the two columns that are evaluated from `Expr` a and `Expr` b."],["map_binary_lazy_field","Binary function where the output type is determined at runtime when the schema is known."],["max","Find the maximum of all the values in this Expression."],["max_exprs","Get the the minimum value per row"],["mean","Find the mean of all the values in this Expression."],["median","Find the median of all the values in this Expression."],["min","Find the minimum of all the values in this Expression."],["min_exprs","Get the the minimum value per row"],["not","Not expression."],["quantile","Find a specific quantile of all the values in this Expression."],["range","Create a range literal."],["sum","Sum all the values in this Expression."],["sum_exprs","Get the the sum of the values per row"],["ternary_expr",""],["when","Start a when-then-otherwise expression"]],"struct":[["FunctionOptions",""],["NoEq","Wrapper type that indicates that the inner type is not equal to anything"],["Null","The literal Null"],["When","Intermediate state of `when(..).then(..).otherwise(..)` expr."],["WhenThen","Intermediate state of `when(..).then(..).otherwise(..)` expr."],["WhenThenThen","Intermediate state of chain when then exprs."],["WindowOptions",""]],"trait":[["BinaryUdfOutputField",""],["Literal",""],["Range",""],["SeriesBinaryUdf","A wrapper trait for any binary closure `Fn(Series, Series) -> Result<Series>`"],["SeriesUdf","A wrapper trait for any closure `Fn(Vec<Series>) -> Result<Series>`"]]});